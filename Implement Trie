/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */

struct Node{
    Node* arr[26]={NULL};
    bool end=false;
};
class Trie {
    Node* root;

public:

    /** Initialize your data structure here. */
    Trie() {
       root=new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* curr=root;
        for(auto x:word){
            if(curr->arr[x-'a']==NULL){
                curr->arr[x-'a']=new Node();
            }
            curr=curr->arr[x-'a'];
        }
        curr->end=true;

    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* curr=root;
        for(auto x:word){
            if(curr->arr[x-'a']==NULL){
                return false;
            }
            curr=curr->arr[x-'a'];
        }
        return curr->end;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* curr=root;
        for(auto x:prefix){
            if(curr->arr[x-'a']==NULL){
                return false;
            }
            curr=curr->arr[x-'a'];
        }
        return true;
    }
};
